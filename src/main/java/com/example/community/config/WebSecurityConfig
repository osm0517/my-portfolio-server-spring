//package com.example.community.config;
//
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;
//import org.springframework.security.core.userdetails.User;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.provisioning.InMemoryUserDetailsManager;
//import org.springframework.security.web.SecurityFilterChain;
//
//@Configuration
//@EnableWebSecurity
//public class WebSecurityConfig {
//
//    @Bean
//    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//        http
//                .authorizeHttpRequests((requests) -> requests
//                        //보안이 필요하지 않는 부분을 명시한다.
//                        //여기에서는 /, /home은 보안이 필요하지 않은 부분으로 명시함
//                        //antMatchers로 특정 리소스를 구분
//                        .antMatchers("/", "/home", "/user/signup").permitAll()
//                        .anyRequest().authenticated()
//                )
//                //로그인 인증을 활성화하겠다는 의미
//                .formLogin((form) -> form
//                        //로그인을 처리하는 화면이 구성된 url
//                        .loginPage("/login")
//                        /*로그인을 처리하는 url
//                        인증처리하는 필터가 호출
//                        생각으로는 post로 했을 때는
//                         필터를 호출하고 get일 때는
//                         페이지를 처리*/
//                        .loginProcessingUrl("/login")
//                        //로그인을 성공했을 때 이동하는 페이지
//                        .defaultSuccessUrl("/main")
//                        .failureUrl("/login")
//                        .permitAll()
//                )
//                .cors().disable()
//                .logout(LogoutConfigurer::permitAll);
//
//        return http.build();
//    }
//
//    @Bean
//    public PasswordEncoder passwordEncoder(){
//        return new BCryptPasswordEncoder();
//    }
//
//    @Bean
//    public UserDetailsService userDetailsService() {
//        UserDetails user =
//                User.withDefaultPasswordEncoder()
//                        .username("user")
//                        .password("password")
//                        .roles("USER")
//                        .build();
//
//        return new InMemoryUserDetailsManager(user);
//    }
//}